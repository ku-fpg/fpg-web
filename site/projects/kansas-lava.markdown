# Kansas Lava Project

What is Kansas Lava Project?
----------------------------

The Kansas Lava project is at attempt to 

On this project, we used [Kansas Lava](/projects/kansas-lava) to generate efficient forward
error correcting codes. From a research point of view, we were attempting
to to answer the following questions:

-   Can we use use functional programming to complement and support the
    current development module of using MATLAB for a reference, and VHDL
    for an implementation.
-   Can we build a functional program that mitigates against the need to
    perform frequent refactorings when working in VHDL, as a suitable
    architecture is discovered.
-   Can we gain a stronger assurance of the relationship between the
    specification and implementation?
-   What are the weaknesses of using a system like Lava to implement a
    FEC, and what are the remaining research problems with using EDSLs
    as an architecture bridge.



Kansas Lava descriptions of hardware are strongly-typed Haskell programs
that describe synthesizable hardware components, and use the type system
of Haskell to help describe connections between the components. Kansas
Lava provides for richer types and structures to be the values flowing
between components, Like other hardware description languages, types are
used to express *size*, but unlike most systems, types are used to
express protocols, specifically how values flow between components.
These use of types facilitate more reliable hardware components.

Kansas Lava descriptions are Haskell programs, and can use the full
range of abstractions provided by Haskell. Kansas Lava provided a number
of powerful combinators to make writing circuits easier, and the results
program is clearer and closer to a specification of the hardware.

Kansas Lava descriptions can be generated by Haskell programs. Lava
constructions are first class values in the library, so well understood
techniques can be used to customize the expression of computation
needed, leading directly to the generation of more efficient and
effective code.

Kansas Lava descriptions can be transformed and reasoned about. They are
Haskell programs, and obey many equational laws to can be used to drive
hand derivations, refactoring, and in the future, equational reasoning
tools.

Finally, Kansas Lava techniques can be also applied in larger, system
architectural settings, giving concise descriptions that be be analyzed
for assurance properties, and key components can be synthesized to
efficient and reliable hardware and software solutions.

Academic Merit
--------------

The academic value of Kansas Lava is exploring ways of exploiting the
relationships between the three execution mechanisms. First, can we
refine a high-level model into a Lava implementation, and what
compromises might be needed to make this possible? Second, having the
ability to execute a circuit in-place at the same time as observe its
structure opens up interesting ways of having hybrid systems, including
debugging mechanism for automatically testing Kansas Lava primitives.
Both these aims are directly reflected in our use of Kansas Lava.

Architecture
------------

This figure gives a high level overview of the architecture of the major
components of Kansas Lava.

![](/files/KansasLava.png)

The user manual give more details of how these components fit together.

Documentation and Further Reading
---------------------------------
